name: Undetected-Frida dev

on:
  schedule:
    - cron: "3 3 */7 * *"
  workflow_dispatch:

jobs: 
  check_version:
    runs-on: ubuntu-latest

    outputs:
      FRIDA_VERSION: ${{ steps.pullFridaLatestRelease.outputs.FRIDA_VERSION }}
      ALREADY_RELEASE: ${{ steps.checkReleaseVersion.outputs.ALREADY_RELEASE }}
    steps:
      - name: Pull Frida Latest Release
        id: pullFridaLatestRelease
        uses: actions/github-script@v7.0.1
        with:
          # The script to run
          script: |
            console.log(github)
            const releaseResponse = await github.rest.repos.getLatestRelease({
              owner: 'frida',
              repo: 'frida',
            })
            const {
              data: { tag_name: ver }
            } = releaseResponse;
            core.setOutput('FRIDA_VERSION', ver);
            
          github-token:  ${{secrets.GITHUB_TOKEN}}
          # Whether to tell the GitHub client to log details of its requests. true or false. Default is to run in debug mode when the GitHub Actions step debug logging is turned on.
          
      
      - name: Check release version
        id: checkReleaseVersion
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            try {
              const releaseVersion = '${{ steps.pullFridaLatestRelease.outputs.FRIDA_VERSION }}'
              const releaseResponse = await github.rest.repos.getReleaseByTag({
                owner: '${{ secrets.GIT_OWNER }}',
                repo: '${{ secrets.GIT_REPO }}',
                tag: releaseVersion
              });
              const {
                data: { tag_name: ver }
              } = releaseResponse;
              if (ver == '${{ steps.pullFridaLatestRelease.outputs.FRIDA_VERSION }}'){
                  core.setOutput('ALREADY_RELEASE', '1');
              }
              else{
                  core.setOutput('ALREADY_RELEASE', '0');
              }
            } catch (e) {
              if(e.message == 'Not Found'){
                core.setOutput('ALREADY_RELEASE', '0');
              }
              else{
                core.setFailed(e.message);
              }
            }
  
  android_build:
    runs-on: ubuntu-latest
    needs: [check_version]

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 18

    - uses: fusion-engineering/setup-git-credentials@v2
      with:
        credentials: ${{secrets.GIT_CREDENTIALS}}

    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Setup Android NDK
      id: setup-ndk
      uses: nttld/setup-ndk@v1.0.6
      with:
        ndk-version: r25b

    - name: Set up Python 3.12
      uses: actions/setup-python@v2
      with:
        python-version: 3.12

    - name: install dependencies
      run: |
        sudo apt-get update && DEBIAN_FRONTEND=noninteractive && \
        sudo apt-get install -y curl g++ pkg-config libgdiplus libunwind8 libssl-dev make gettext libssl-dev python3.12 python3.12-dev \
        zlib1g libicu-dev uuid-dev unzip tree ninja-build gcc-multilib g++-multilib lib32stdc++-9-dev flex bison xz-utils ruby ruby-dev \
        gobject-introspection gobject-introspection-bin python3-gi ruby-gobject-introspection \
        libgirepository-2.0-0 libgirepository-2.0-dev libgirepository1.0-dev libgirepository-1.0-1 \
        build-essential git lib32stdc++-9-dev libc6-dev-i386 libc6-dev libc6-dev-i386 cmake python3-requests python3-setuptools python3-pip libc6-dev libc6-dev-i386 
        sudo gem install fpm -v 1.11.0 --no-document
        python3 -m pip install lief graphlib
    
    - name: build frida for Android
      shell: bash
      run: |
        git config --global user.name "${{ secrets.GIT_NAME }}"
        git config --global user.email "${{ secrets.GIT_EMAIL }}"
        git clone ${{ secrets.PATCH_REPO }}
        export ANDROID_NDK_ROOT=${{ steps.setup-ndk.outputs.ndk-path }}
        git clone --recurse-submodules https://github.com/frida/frida
        ls -lahtu
        cd "$(find -name frida-core 2>/dev/null | head -n1)"
        ls -lahtu
        echo "$PWD"
        ls -lah
        git apply --reject --whitespace=fix ../../../undetected-frida-patches/0000*.patch
        git apply --reject --whitespace=fix ../../../undetected-frida-patches/0009*.patch
        git am --reject --whitespace=fix ../../../undetected-frida-patches/0001*.patch
        git am --reject --whitespace=fix ../../../undetected-frida-patches/0003*.patch
        git am --reject --whitespace=fix ../../../undetected-frida-patches/0004*.patch
        git am --reject --whitespace=fix ../../../undetected-frida-patches/0005*.patch
        git am --reject --whitespace=fix ../../../undetected-frida-patches/0006*.patch
        git am --reject --whitespace=fix ../../../undetected-frida-patches/0007*.patch
        git am --reject --whitespace=fix ../../../undetected-frida-patches/0008*.patch
        cd ../../
        mkdir -p out/{arm64,arm,x64} 
        
        ./configure --host=android-arm64 --disable-frida-tools --disable-graft-tool --enable-gadget --enable-server  --disable-frida-python
        make 
        
        gadget=$(find build/subprojects -name frida-gadget.so  | head -n 1) ;
        if [ -n $gadget ]; then cp -r $gadget out/arm64; fi  
        
        agent=$(find build/subprojects -name frida-agent.so  | head -n 1) ;
        if [ -n $agent ]; then cp -r $agent out/arm64; fi 

        server=$(find build/subprojects -type f -name frida-server  | head -n 1);
        if [ -n $server ]; then cp -r $server out/arm64; fi 

        inject=$(find build/subprojects -type f -name frida-inject  | head -n 1) ;
        if [ -n $inject ]; then cp -r $inject out/arm64; fi 
        
        rm -rf build

        ./configure --host=android-arm --disable-frida-tools --disable-graft-tool --enable-gadget --enable-server  --disable-frida-python
        make 
        gadget=$(find build/subprojects -name frida-gadget.so  | head -n 1) ;
        if [ -n $gadget ]; then cp ${gadget} out/arm 2>/dev/null; fi  
        
        agent=$(find build/subprojects -name frida-agent.so  | head -n 1) ;
        if [ -n $agent ]; then cp  ${agent} out/arm 2>/dev/null; fi 

        server=$(find build/subprojects -type f -name frida-server  | head -n 1);
        if [ -n $server ]; then cp ${server} out/arm 2>/dev/null; fi 

        inject=$(find build/subprojects -type f -name frida-inject  | head -n 1);
        if [ -n $inject ]; then cp ${inject} out/arm 2>/dev/null; fi 
        rm -rf build
        
        ./configure --host=android-x86_64  --disable-frida-tools --disable-graft-tool --enable-gadget --enable-server  --disable-frida-python
        make
        
        gadget=$(find build/subprojects -name frida-gadget.so | head -n 1) ;
        if [ -n $gadget ]; then cp ${gadget} out/x64 2>/dev/null; fi  
        
        agent=$(find build/subprojects -name frida-agent.so | head -n 1) ;
        if [ -n $agent ]; then cp  ${agent} out/x64 2>/dev/null; fi 

        server=$(find build/subprojects -type f -name frida-server  | head -n 1);
        if [ -n $server ]; then cp  ${server} out/x64 2>/dev/null; fi 

        inject=$(find build/subprojects -type f -name frida-inject  | head -n 1);
        if [ -n $inject ]; then cp -r ${inject} out/x64 2>/dev/null; fi 
         
        rm -rf build
         
    - name: package build result for Android
      shell: bash
      run: |
        pushd $(find ../ -type d -name "frida" | head -n 1)
        
        if [ -e out/arm/frida-server ]; then
          xz out/arm/frida-server ;
        fi
        if [ -e out/arm/frida-gadget.so ]; then
          xz out/arm/frida-gadget.so ;
        fi
        if [ -e out/arm/frida-agent.so ]; then
          xz out/arm/frida-agent.so
        fi
        if [ -e out/arm/frida-inject ] ; then 
          xz out/arm/frida-inject ;
        fi

        if [ -e out/arm64/frida-server ]; then
          xz out/arm64/frida-server ;
        fi
        if [ -e out/arm64/frida-gadget.so ]; then
          xz out/arm64/frida-gadget.so ;
        fi
        if [ -e out/arm64/frida-agent.so ]; then
          xz out/arm64/frida-agent.so
        fi
        if [ -e out/arm64/frida-inject ] ; then 
          xz out/arm64/frida-inject ;
        fi

        if [ -e out/x64/frida-server ]; then
          xz out/x64/frida-server ;
        fi
        if [ -e out/x64/frida-gadget.so ]; then
          xz out/x64/frida-gadget.so ;
        fi
        if [ -e out/x64/frida-agent.so ]; then
           xz out/x64/frida-agent.so
        fi
        if [ -e out/x64/frida-inject ] ; then 
          xz out/x64/frida-inject ;
        fi
        

    
        # xz out/arm64/build/frida-android-arm/bin/frida-inject
        # xz build/frida-android-arm64/bin/frida-inject
        
        # xz build/frida-android-x86/bin/frida-inject
        # xz build/frida-android-x86_64/bin/frida-inject
        
        # xz build/frida-android-arm/lib/frida/32/frida-gadget.so
        # xz build/frida-android-arm64/lib/frida/64/frida-gadget.so
        
        # xz build/frida-android-x86/lib/frida/32/frida-gadget.so
        # xz build/frida-android-x86_64/lib/frida/64/frida-gadget.so
        
        popd
  
  create_release:
    needs: [check_version, android_build]
    runs-on: ubuntu-latest
    if: needs.check_version.outputs.ALREADY_RELEASE == '0'

    steps:

      - name: Check release version
        id: checkReleaseVersion
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            try {
              const releaseVersion = '${{ steps.pullFridaLatestRelease.outputs.FRIDA_VERSION }}'
              const releaseResponse = await github.rest.repos.getReleaseByTag({
                owner: '${{ secrets.GIT_OWNER }}',
                repo: '${{ secrets.GIT_REPO }}',
                tag: releaseVersion
              });
              const {
                data: { tag_name: ver }
              } = releaseResponse;
              if (ver == '${{ steps.pullFridaLatestRelease.outputs.FRIDA_VERSION }}'){
                  core.setOutput('ALREADY_RELEASE', '1');
              }
              else{
                  core.setOutput('ALREADY_RELEASE', '0');
              }
            } catch (e) {
              if(e.message == 'Not Found'){
                core.setOutput('ALREADY_RELEASE', '0');
              }
              else{
                core.setFailed(e.message);
              }
            }
      - uses: actions/create-release@master
        id: createRelease
        name: Create Runner Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ needs.check_version.outputs.FRIDA_VERSION }}"
          release_name: "${{ needs.check_version.outputs.FRIDA_VERSION }}"
          prerelease: false
    
        
      - name: Upload android arm frida-server for Undetected-Frida
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: '${{ steps.checkReleaseVersion.outputs.upload_url }}'
          asset_path: '${{ github.workspace }}/frida/out/arm/frida-server.xz'
          asset_name: 'undetected-frida-server-${{ needs.check_version.outputs.FRIDA_VERSION }}-android-arm.xz'
          asset_content_type: application/octet-stream

      - name: Upload android arm64 frida-server for Undetected-Frida
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: '${{ steps.checkReleaseVersion.outputs.upload_url }}'
          asset_path: '${{ github.workspace }}/frida/out/arm64/frida-server.xz'
          asset_name: 'undetected-frida-server-${{ needs.check_version.outputs.FRIDA_VERSION }}-android-arm64.xz'
          asset_content_type: application/octet-stream


      - name: Upload android x86_64 frida-server for Undetected-Frida
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: '${{ steps.checkReleaseVersion.outputs.upload_url }}'
          asset_path: '${{ github.workspace }}/frida/out/x64/frida-server.xz'
          asset_name: 'undetected-frida-server-${{ needs.check_version.outputs.FRIDA_VERSION }}-android-x86_64.xz'
          asset_content_type: application/octet-stream
        
      - name: Upload android arm frida-inject for Undetected-Frida
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: '${{ steps.checkReleaseVersion.outputs.upload_url }}'
          asset_path: '${{ github.workspace }}/frida/out/arm/frida-inject.xz'
          asset_name: 'undetected-frida-inject-${{ needs.check_version.outputs.FRIDA_VERSION }}-android-arm.xz'
          asset_content_type: application/octet-stream
        
      - name: Upload android arm64 frida-inject for Undetected-Frida
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: '${{ steps.checkReleaseVersion.outputs.upload_url }}'
          asset_path: '${{ github.workspace }}/frida/out/arm64/frida-inject.xz'
          asset_name: 'undetected-frida-inject-${{ needs.check_version.outputs.FRIDA_VERSION }}-android-arm64.xz'
          asset_content_type: application/octet-stream


      - name: Upload android x64 frida-inject for Undetected-Frida
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: '${{ steps.checkReleaseVersion.outputs.upload_url }}'
          asset_path: '${{ github.workspace }}/frida/out/x64/frida-inject.xz'
          asset_name: 'undetected-frida-inject-${{ needs.check_version.outputs.FRIDA_VERSION }}-android-x86_64.xz'
          asset_content_type: application/octet-stream
        
        
      - name: Upload android x86 frida-gadget for Undetected-Frida
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: '${{ steps.checkReleaseVersion.outputs.upload_url }}'
          asset_path: '${{ github.workspace }}/frida/out/x64/frida-gadget.so.xz'
          asset_name: 'undetected-frida-gadget-${{ needs.check_version.outputs.FRIDA_VERSION }}-android-x86_64.xz'
          asset_content_type: application/octet-stream

      - name: Upload android arm frida-gadget for Undetected-Frida
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: '${{ steps.checkReleaseVersion.outputs.upload_url }}'
          asset_path: '${{ github.workspace }}/frida/out/arm/frida-gadget.so.xz'
          asset_name: 'undetected-frida-gadget-${{ needs.check_version.outputs.FRIDA_VERSION }}-android-arm.xz'
          asset_content_type: application/octet-stream

      
      - name: Upload android arm64 frida-gadget for Undetected-Frida
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: '${{ steps.checkReleaseVersion.outputs.upload_url }}'
          asset_path: '${{ github.workspace }}/frida/out/arm64/frida-gadget.so.xz'
          asset_name: 'undetected-frida-gadget-${{ needs.check_version.outputs.FRIDA_VERSION }}-android-arm64.xz'
          asset_content_type: application/octet-stream

  
   
